name: 'Deploy MSSQL Server'
run-name: '${{github.actor}} - Deployingto_${{inputs.subscription}}_${{inputs.environment}}'
on:
    workflow_dispatch:
     inputs:
        subscription:
          type: string
          required: true
          description: Please enter your subcription Name
        location:
          type: choice
          description: Pick the Location
          options:
            - eastus2
            - centralus
        environment:
          type: choice
          description: choose the environment
          options:
             - dev
             - qa 
             - UAT
             - Prod
        purpose:
          type: string
          required: true
          description: Enter Purpose for app (3-5 char)
        subnetname:
          type: string
          required: true
          description: Enter the subnet name for db end points
        dbcollation:
          type: string
          required: false
          description: Specify Collation of the database
          default: SQL_Latin1_General_CP1_CI_AS
        skuname:
          type: choice
          description: select SKU_NAME used by Database
          options:
            - S0
            - P2
            - Basic
            - ElasticPool
            - BC_Gen5_2
            - HS_Gen4_1
            - GP_S_Gen5_2
            - DW100c
            - DS100
        zoneredundancy:
          type: choice
          options:
            - "false"
            - "true"
jobs:
  Deploying-Resource-Group:
    name: 'Deploying - resource-group'
    uses: ./.github/workflows/CreateResourceGroup.yml
    secrets:
      ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}
    with:
      name: 'resource-group'
      subscription: '${{inputs.subscription}}'
      location: '${{inputs.location}}'
      environment: '${{inputs.environment}}'
      purpose: '${{inputs.purpose}}'
  Deploying-Mysql-server:
    name: 'Deploying - MSSQL server'
    uses: ./.github/workflows/Createmssqlserver.yml
    needs: Deploying-Resource-Group
    secrets: 
      ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}
    with:
      name: 'mssql'
      subscription: '${{inputs.subscription}}'
      location: '${{inputs.location}}'
      environment: '${{inputs.environment}}'
      purpose: '${{inputs.purpose}}'
      subnetname: '${{inputs.subnetname}}'
      dbcollation: '${{inputs.dbcollation}}'
      skuname: '${{inputs.skuname}}'
      zoneredundancy: '${{inputs.zoneredundancy}}'

###################
Create_sql_server
###############

name: 'Create MS SQL Server'
run-name: ${{github.actor}}
on:
    workflow_call:
      inputs:
        name:
          type: string
          required: false
        subscription:
            type: string
            required: true
        location:
          type: string
          required: true
        environment:
          type: string
          required: true
        purpose:
          type: string
          required: true
        subnetname:
          type: string
          required: true
        dbcollation:
          type: string
          required: false
        skuname:
          type: string
          required: false
        zoneredundancy:
          type: string
          required: false
      secrets:
        ARM_CLIENT_ID:
          required: true
        ARM_CLIENT_SECRET:
          required: true
        ARM_SUBSCRIPTION_ID:
          required: true
        ARM_TENANT_ID:
          required: true
env:
 permissions:
 contents: read
jobs:
  mssql-server-reusable-workflow:
    name: 'Creating - MSSQL Server'
    env:
        ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
        ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
        ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
        ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
        ROOT_PATH: 'Azure/${{inputs.name}}'
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    - name: Terraform Initialize
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: ${{env.ROOT_PATH}}
        tf_actions_comment: true
      env:
        TF_VAR_name: '${{inputs.name}}'
        TF_VAR_location: '${{inputs.location}}'
        TF_VAR_environment: '${{inputs.environment}}'
        TF_VAR_purpose: '${{inputs.purpose}}'
        TF_VAR_subnetname: '${{inputs.subnetname}}'
        TF_VAR_dbcollation: '${{inputs.dbcollation}}'
        TF_VAR_skuname: '${{inputs.skuname}}'
        TF_VAR_zoneredundancy: '${{inputs.zoneredundancy}}'
    - name: Terraform Plan
      uses: hashicorp/terraform-github-actions@master
      with:
       tf_actions_version: latest
       tf_actions_subcommand: 'plan'
       tf_actions_working_dir: ${{env.ROOT_PATH}}
       tf_actions_comment: true
      env:
        TF_VAR_name: '${{inputs.name}}'
        TF_VAR_location: '${{inputs.location}}'
        TF_VAR_environment: '${{inputs.environment}}'
        TF_VAR_purpose: '${{inputs.purpose}}'
        TF_VAR_subnetname: '${{inputs.subnetname}}'
        TF_VAR_dbcollation: '${{inputs.dbcollation}}'
        TF_VAR_skuname: '${{inputs.skuname}}'
        TF_VAR_zoneredundancy: '${{inputs.zoneredundancy}}'
    - name: Terraform apply
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: ${{env.ROOT_PATH}}
        tf_actions_comment: true
      env:
        TF_VAR_name: '${{inputs.name}}'
        TF_VAR_location: '${{inputs.location}}'
        TF_VAR_environment: '${{inputs.environment}}'
        TF_VAR_purpose: '${{inputs.purpose}}'
        TF_VAR_subnetname: '${{inputs.subnetname}}'
        TF_VAR_dbcollation: '${{inputs.dbcollation}}'
        TF_VAR_skuname: '${{inputs.skuname}}'
        TF_VAR_zoneredundancy: '${{inputs.zoneredundancy}}'

########################
Deplot_Windows_VM
##################

name: '- Deploy Windows VM'
run-name: 'Windows VM - ${{inputs.environment}} purpose: ${{inputs.purpose}} : ${{inputs.requesttype}}'
on:
  workflow_dispatch:
    inputs:
        requesttype:
          type: choice
          required: true
          description: Request Type
          options:
              - Create (with New RG)
              - Create (with Existing RG)
              - Update (Data Disk)
              - Update (OS Disk)
              - Remove (Not Available - upcoming functionality)
          default:
              "Create (with New RG)"
        environment:
          type: choice
          required: true
          description: Environment
          options:
              - DEV
              - UAT
              - QA
              - PROD
        location:
          type: choice
          required: true
          description: Deployment Location
          options:
              - Select the location
              - eastus2
              - uksouth
              - centralus
              - ukwest
        vmsize:
          type: string
          required: true
          default: "Standard_D2s_v3"
          description: VM Size (SKU Designation)
        purpose:
          type: string
          required: true
          description: Role/Sequence for VM (RRRR/SSS). Hyphen designate an existing VM
        purposeRG:
          type: string
          required: true
          description: Resource Group Purpose.......... Hyphen designate an existing RG
        projectou:
            type: string
            required: true
            description: Ignored on Update............. Organizational Unit (OU) for Domain Join. 
        subnetNameWVM:
          type: string
          required: true
          description: Ignored on Update............... Subnet name for the network interface.
        diskSizeGB:
            type: string
            required: false
            description: Disk Size in GB................. Data Disk on Create............. Update specifies Data or OS Disk. On Update use "Same" retain size.
            default: "32"
        diskStorageAccountType:
          type: choice
          required: false
          description: Disk Storage Account Type....... Data Disk on Create............. Update specifies Data or OS Disk. Blank on Update to retain size.
          options: 
            - Standard_LRS
            - StandardSSD_LRS
            - StandardSSD_ZRS
            - Premium_LRS
            - Premium_ZRS
            - " "
jobs:
      resource_group:
        if: (github.event.inputs.requestType == 'Create (with New RG)')
        name: 'Resource Group ${{inputs.purposeRG}}'
        uses: ./.github/workflows/CreateResourceGroup.yml
        secrets:
          ARM_CLIENT_ID:        ${{secrets.AZURE_CLIENT_ID}}
          ARM_CLIENT_SECRET:    ${{secrets.AZURE_CLIENT_SECRET}}
          ARM_SUBSCRIPTION_ID:  ${{secrets.AZURE_SUBSCRIPTION_ID}}
          ARM_TENANT_ID:        ${{secrets.AZURE_TENANT_ID}}
        with:
          name:                 'resource-group'
          subscription:         'SNow Input'
          environment:          '${{inputs.environment}}' 
          location:             '${{inputs.location}}' 
          purpose:              '${{inputs.purposeRG}}'
      windows_vm_new_rg:
        if: (github.event.inputs.requestType == 'Create (with New RG)')
        name: 'Windows VM ${{inputs.purpose}}'
        uses: ./.github/workflows/WindowsVMCreate.yml
        needs: resource_group
        secrets:
          ARM_CLIENT_ID:        ${{secrets.AZURE_CLIENT_ID}}
          ARM_CLIENT_SECRET:    ${{secrets.AZURE_CLIENT_SECRET}}
          ARM_SUBSCRIPTION_ID:  ${{secrets.AZURE_SUBSCRIPTION_ID}}
          ARM_TENANT_ID:        ${{secrets.AZURE_TENANT_ID}}
        with:
          requestType:                '${{inputs.requestType}}'
          environment:                '${{inputs.environment}}'
          location:                   '${{inputs.location}}'
          vmsize:                     '${{inputs.vmsize}}'
          purpose:                    '${{inputs.purpose}}'
          purposeRG:                  '${{inputs.purposeRG}}'
          projectou:                  '${{inputs.projectou}}'
          subnetNameWVM:              '${{inputs.subnetNameWVM}}'
          diskSizeGB:                 '${{inputs.diskSizeGB}}'
          diskStorageAccountType:     '${{inputs.diskStorageAccountType}}'
      windows_vm_existing_rg:
          if: (github.event.inputs.requestType == 'Create (with Existing RG)')
          name: 'Windows VM ${{inputs.purpose}}'
          uses: ./.github/workflows/WindowsVMCreate.yml
          secrets:
            ARM_CLIENT_ID:        ${{secrets.AZURE_CLIENT_ID}}
            ARM_CLIENT_SECRET:    ${{secrets.AZURE_CLIENT_SECRET}}
            ARM_SUBSCRIPTION_ID:  ${{secrets.AZURE_SUBSCRIPTION_ID}}
            ARM_TENANT_ID:        ${{secrets.AZURE_TENANT_ID}}
          with:
            requestType:                '${{inputs.requestType}}'
            environment:                '${{inputs.environment}}' 
            location:                   '${{inputs.location}}'
            vmsize:                     '${{inputs.vmsize}}'
            purpose:                    '${{inputs.purpose}}'
            purposeRG:                  '${{inputs.purposeRG}}'
            projectou:                  '${{inputs.projectou}}'
            subnetNameWVM:              '${{inputs.subnetNameWVM}}'
            diskSizeGB:                 '${{inputs.diskSizeGB}}'
            diskStorageAccountType:     '${{inputs.diskStorageAccountType}}'
      windows_vm_maintain:
        if: (github.event.inputs.requestType == 'Update (Data Disk)' || github.event.inputs.requestType == 'Update (OS Disk)')
        name: 'Maintain Windows VM ${{inputs.purpose}}'
        uses: ./.github/workflows/WindowsVMMaintain.yml
        secrets:
          ARM_CLIENT_ID:        ${{secrets.AZURE_CLIENT_ID}}
          ARM_CLIENT_SECRET:    ${{secrets.AZURE_CLIENT_SECRET}}
          ARM_SUBSCRIPTION_ID:  ${{secrets.AZURE_SUBSCRIPTION_ID}}
          ARM_TENANT_ID:        ${{secrets.AZURE_TENANT_ID}}
        with:
          requestType:                '${{inputs.requestType}}'
          environment:                '${{inputs.environment}}' 
          location:                   '${{inputs.location}}'
          vmsize:                     '${{inputs.vmsize}}'
          purpose:                    '${{inputs.purpose}}'
          purposeRG:                  '${{inputs.purposeRG}}'
          # projectou:                  '${{inputs.projectou}}'
          # subnetNameWVM:              '${{inputs.subnetNameWVM}}'
          diskSizeGB:                 '${{inputs.diskSizeGB}}'
          diskStorageAccountType:     '${{inputs.diskStorageAccountType}}'

######################
Create_Windows_VM
######################

name: 'zWindows VM (Call)'
run-name: '${{github.actor}} - Creating App Gateway'
on:
  workflow_call:
    inputs:
      requestType:
        type: string
        required: false
      environment:
        type: string
        required: true
      location:
        type: string
        required: false
      vmsize:
        type: string
        required: false
      purpose:
        type: string
        required: false
      purposeRG:
        type: string
        required: false
      projectou:
        type: string
        required: false
      subnetNameWVM:
        type: string
        required: false
      diskSizeGB:
        type: string
        required: false
      diskStorageAccountType:
        type: string
        required: false
    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
env:
  permissions:
  contents: read
jobs:
  wvm-create:
    name: 'Create Windows VM'
    env:
      ARM_CLIENT_ID:        ${{secrets.ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET:    ${{secrets.ARM_CLIENT_SECRET}}
      ARM_TENANT_ID:        ${{secrets.ARM_TENANT_ID}}
      ARM_SUBSCRIPTION_ID:  ${{secrets.ARM_SUBSCRIPTION_ID}}
      ROOT_PATH:            'Azure/windows-vm'
    runs-on: 
      group: aks-runners
    environment: ${{inputs.environment}}
    defaults:
      run:
        shell: bash
    steps:
      - name: 'Checkout - Windows VM (${{ inputs.purpose }})'
        uses: actions/checkout@v3
      - name: 'Terraform Initialize - Windows VM (${{ inputs.purpose }})'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version:     latest
          tf_actions_subcommand:  'init'
          tf_actions_working_dir: ${{env.ROOT_PATH}}
          tf_actions_comment:     true
        env:
          TF_VAR_request_type:              '${{inputs.requestType}}'
          TF_VAR_location:                  '${{inputs.location}}'
          TF_VAR_vm_size:                   '${{inputs.vmsize}}'
          TF_VAR_purpose:                   '${{inputs.purpose}}'
          TF_VAR_purpose_rg:                '${{inputs.purposeRG}}'
          TF_VAR_project_ou:                '${{inputs.projectou}}'
          TF_VAR_subnetname_wvm:            '${{inputs.subnetNameWVM}}'
          TF_VAR_disk_size_gb:              '${{inputs.diskSizeGB}}'
          TF_VAR_disk_storage_account_type: '${{inputs.diskStorageAccountType}}'
      - name: 'Terraform Plan - Wiindows VM (${{ inputs.purpose }})'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version:     latest
          tf_actions_subcommand:  'plan'
          tf_actions_working_dir: ${{env.ROOT_PATH}}
          tf_actions_comment:     true
        env:
          TF_VAR_request_type:              '${{inputs.requestType}}'
          TF_VAR_location:                  '${{inputs.location}}'
          TF_VAR_vm_size:                   '${{inputs.vmsize}}'
          TF_VAR_purpose:                   '${{inputs.purpose}}'
          TF_VAR_purpose_rg:                '${{inputs.purposeRG}}'
          TF_VAR_project_ou:                '${{inputs.projectou}}'
          TF_VAR_subnetname_wvm:            '${{inputs.subnetNameWVM}}'
          TF_VAR_disk_size_gb:              '${{inputs.diskSizeGB}}'
          TF_VAR_disk_storage_account_type: '${{inputs.diskStorageAccountType}}'
      - name: 'Terraform Apply - Windows VM (${{ inputs.purpose }})'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version:     latest
          tf_actions_subcommand:  'apply'
          tf_actions_working_dir: ${{env.ROOT_PATH}}
          tf_actions_comment:     true
        env:
          TF_VAR_request_type:              '${{inputs.requestType}}'
          TF_VAR_location:                  '${{inputs.location}}'
          TF_VAR_vm_size:                   '${{inputs.vmsize}}'
          TF_VAR_purpose:                   '${{inputs.purpose}}'
          TF_VAR_purpose_rg:                '${{inputs.purposeRG}}'
          TF_VAR_project_ou:                '${{inputs.projectou}}'
          TF_VAR_subnetname_wvm:            '${{inputs.subnetNameWVM}}'
          TF_VAR_disk_size_gb:              '${{inputs.diskSizeGB}}'
          TF_VAR_disk_storage_account_type: '${{inputs.diskStorageAccountType}}'

