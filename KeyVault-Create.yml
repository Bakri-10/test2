name: 'Key Vault Create or Remove'
run-name: ${{github.actor}}
on:
  workflow_call:
    inputs:
      requestType:
        type: string
        required: true
      location:
        type: string
        required: true
      environment:
        type: string
        required: true
      purpose:
        type: string
        required: true
      purposeRG:
        type: string
        required: true
      subnetNamePrivateEndpoint:
        type: string
        required: true
      subnetNameSvcEndpoint:
        type: string
        required: false
      ipRules:
        type: string
        required: true
      sku:
        type: string
        required: true
    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true

env:
  permissions:
    contents: read

jobs:
  KeyVault:
    name: 'Key Vault Create or Remove'
    env:
      ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
      ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
      ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
      ROOT_PATH: 'Azure/key-vault'
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId": "${{secrets.ARM_CLIENT_ID}}", "clientSecret": "${{secrets.ARM_CLIENT_SECRET}}", "subscriptionId": "${{secrets.ARM_SUBSCRIPTION_ID}}", "tenantId": "${{secrets.ARM_TENANT_ID}}"}'

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Terraform Initialize
        run: terraform init
        working-directory: ${{env.ROOT_PATH}}

      - name: Terraform Plan
        if: ${{ inputs.requestType == 'Create (with New RG)' || inputs.requestType == 'Create (with Existing RG)' }}
        run: terraform plan
        working-directory: ${{env.ROOT_PATH}}
        env:
          TF_VAR_location: '${{inputs.location}}'
          TF_VAR_environment: '${{inputs.environment}}'
          TF_VAR_purpose: '${{inputs.purpose}}'
          TF_VAR_purpose_rg: '${{inputs.purposeRG}}'
          TF_VAR_subnet_name_private_endpoint: '${{inputs.subnetNamePrivateEndpoint}}'
          TF_VAR_subnet_name_svc_endpoint: '${{inputs.subnetNameSvcEndpoint}}'
          TF_VAR_sku_name: '${{inputs.sku}}'
          TF_VAR_ip_rules: '[ "${{inputs.ipRules}}" ]'

      - name: Terraform Apply
        if: ${{ inputs.requestType == 'Create (with New RG)' || inputs.requestType == 'Create (with Existing RG)' }}
        run: terraform apply -auto-approve
        working-directory: ${{env.ROOT_PATH}}
        env:
          TF_VAR_location: '${{inputs.location}}'
          TF_VAR_environment: '${{inputs.environment}}'
          TF_VAR_purpose: '${{inputs.purpose}}'
          TF_VAR_purpose_rg: '${{inputs.purposeRG}}'
          TF_VAR_subnet_name_private_endpoint: '${{inputs.subnetNamePrivateEndpoint}}'
          TF_VAR_subnet_name_svc_endpoint: '${{inputs.subnetNameSvcEndpoint}}'
          TF_VAR_sku_name: '${{inputs.sku}}'
          TF_VAR_ip_rules: '[ "${{inputs.ipRules}}" ]'

      - name: Terraform Destroy
        if: ${{ inputs.requestType == 'Remove' }}
        run: terraform destroy -auto-approve
        working-directory: ${{env.ROOT_PATH}}
        env:
          TF_VAR_location: '${{inputs.location}}'
          TF_VAR_environment: '${{inputs.environment}}'
          TF_VAR_purpose: '${{inputs.purpose}}'
          TF_VAR_purpose_rg: '${{inputs.purposeRG}}'
          TF_VAR_subnet_name_private_endpoint: '${{inputs.subnetNamePrivateEndpoint}}'
          TF_VAR_subnet_name_svc_endpoint: '${{inputs.subnetNameSvcEndpoint}}'
          TF_VAR_sku_name: '${{inputs.sku}}'
          TF_VAR_ip_rules: '[ "${{inputs.ipRules}}" ]'
