// Providers
provider "azurerm" {
  features {}
}

data "azurerm_subscription" "current" {}  // Read the current subscription info

data "azurerm_client_config" "clientconfig" {} // Read the current client config

// Variables
variable "location" {
  description = "The Azure location for the resources."
  type        = string
}

variable "environment_map" {
  type    = map(string)
  default = {
    dev  = "D"
    test = "T"
    prod = "P"
    # Add other environments as needed
  }
}

variable "location_map" {
  type    = map(string)
  default = {
    eastus     = "EUS"
    westus     = "WUS"
    centralus  = "CUS"
    # Add other locations as needed
  }
}

variable "purpose" {
  description = "The purpose of the resource."
  type        = string
  default     = ""
}

variable "purpose_rg" {
  description = "The purpose resource group."
  type        = string
  default     = ""
}

variable "RGname" {
  description = "Resource group name."
  type        = string
  default     = ""
}

variable "sku_name" {
  description = "The SKU name for the Load Balancer."
  type        = string
  default     = "Standard"
}

variable "private_ip_address" {
  description = "The private IP address to assign to the Load Balancer."
  type        = string
  default     = ""
}

variable "subnetname" {
  description = "Name of the subnet."
  type        = string
  default     = ""
}

// Locals
locals {
  get_data = csvdecode(file("../parameters.csv"))

  // Define data for naming standards 
  naming = {
    bu                = lower(split("-", data.azurerm_subscription.current.display_name)[1]) // Read BU from subscription
    environment       = lower(split("-", data.azurerm_subscription.current.display_name)[2]) // Read environment
    locations         = var.location
    nn                = lower(split("-", data.azurerm_subscription.current.display_name)[3])
    subscription_name = data.azurerm_subscription.current.display_name
    subscription_id   = data.azurerm_subscription.current.id
  }

  env_location = {
    env_abbreviation       = var.environment_map[local.naming.environment]
    locations_abbreviation = var.location_map[local.naming.locations]
  }

  per_instance = {
    for index, inst in local.get_data : index => {
      purpose     = lookup(inst, "purpose", var.purpose)
      lb_role     = strcontains(lookup(inst, "purpose", var.purpose), "/") ? split("/", lookup(inst, "purpose", var.purpose))[0] : "defined"
      lb_sequence = strcontains(lookup(inst, "purpose", var.purpose), "/") ? split("/", lookup(inst, "purpose", var.purpose))[1] : random_integer.lb_sequence[index].result
    }
  }
}

// Random Integer for Load Balancer Sequence
resource "random_integer" "lb_sequence" {
  for_each = { for index, inst in local.get_data : index => inst }
  min      = 100
  max      = 999
}

// Data Resources
data "azurerm_resource_group" "rg" {
  for_each = { for index, inst in local.get_data : index => inst }
  name     = join("-", [local.naming.bu, local.naming.environment, local.env_location.locations_abbreviation, local.per_instance[each.key].purpose, "rg"])
}

output "resource_group_name" {
  value = data.azurerm_resource_group.rg
}

data "azurerm_virtual_network" "vnet" {
  for_each = { for index, inst in local.get_data : index => inst }
  name = (lookup(each.value, "vnet_name", null) != null && lookup(each.value, "vnet_name", "") != "")
    ? each.value.vnet_name
    : join("-", [local.naming.bu, local.naming.environment, local.env_location.locations_abbreviation, "vnet", local.naming.nn])
  resource_group_name = (lookup(each.value, "vnet_resource_group", null) != null && lookup(each.value, "vnet_resource_group", "") != "")
    ? each.value.vnet_resource_group
    : join("-", [local.naming.bu, local.naming.environment, local.env_location.locations_abbreviation, "spokenetwork-rg"])
}

output "virtual_network_id" {
  value     = data.azurerm_virtual_network.vnet
  sensitive = true
}

data "azurerm_subnet" "subnet" {
  for_each = { for index, inst in local.get_data : index => inst }
  name                 = (lookup(each.value, "subnet_name", null) != null && lookup(each.value, "subnet_name", "") != "") ? each.value.subnet_name : var.subnetname
  virtual_network_name = data.azurerm_virtual_network.vnet[each.key].name
  resource_group_name  = data.azurerm_virtual_network.vnet[each.key].resource_group_name
}

output "subnet_id" {
  value     = data.azurerm_subnet.subnet
  sensitive = true
}

// Random ID for Naming Uniqueness
resource "random_id" "randomnumber" {
  byte_length = 1
}

// Azure Load Balancer Resource
resource "azurerm_lb" "internal_lb" {
  for_each = { for index, inst in local.get_data : index => inst }
  name = (
    strcontains(local.per_instance[each.key].purpose, "-")
      ? upper(local.per_instance[each.key].purpose)
      : upper(
          join("", [
            "AZ",
            local.env_location.locations_abbreviation,
            "-",
            local.per_instance[each.key].lb_role,
            local.env_location.env_abbreviation,
            local.per_instance[each.key].lb_sequence,
          ])
        )
  )
  location            = var.location
  resource_group_name = data.azurerm_resource_group.rg[each.key].name
  sku                 = lookup(each.value, "sku_name", var.sku_name)

  frontend_ip_configuration {
    name                          = "internal-${local.per_instance[each.key].lb_role}-${local.per_instance[each.key].lb_sequence}-feip"
    subnet_id                     = data.azurerm_subnet.subnet[each.key].id
    private_ip_address            = var.private_ip_address
    private_ip_address_allocation = "Static"
  }
}

// Define Backend Address Pool separately
resource "azurerm_lb_backend_address_pool" "internal_lb_bepool" {
  for_each        = azurerm_lb.internal_lb
  loadbalancer_id = azurerm_lb.internal_lb[each.key].id
  name            = "internal-${local.per_instance[each.key].lb_role}-${local.per_instance[each.key].lb_sequence}-bepool"
}

// Load Balancer Probe
resource "azurerm_lb_probe" "tcp_probe" {
  for_each            = azurerm_lb.internal_lb
  name                = "internal-${local.per_instance[each.key].lb_role}-${local.per_instance[each.key].lb_sequence}-tcp-probe"
  loadbalancer_id     = azurerm_lb.internal_lb[each.key].id
  protocol            = "Tcp"
  port                = 20000
  interval_in_seconds = 10
  number_of_probes    = 5
}

// Load Balancer TCP Rule
resource "azurerm_lb_rule" "tcp_rule" {
  for_each                       = azurerm_lb.internal_lb
  name                           = "internal-${local.per_instance[each.key].lb_role}-${local.per_instance[each.key].lb_sequence}-tcp-lbrule"
  loadbalancer_id                = azurerm_lb.internal_lb[each.key].id
  protocol                       = "Tcp"
  frontend_port                  = 20000
  backend_port                   = 20000
  frontend_ip_configuration_name = azurerm_lb.internal_lb[each.key].frontend_ip_configuration[0].name
  backend_address_pool_ids       = [azurerm_lb_backend_address_pool.internal_lb_bepool[each.key].id]
  idle_timeout_in_minutes        = 5
  enable_floating_ip             = false
  enable_tcp_reset               = false
  disable_outbound_snat          = false
  probe_id                       = azurerm_lb_probe.tcp_probe[each.key].id
}

// Load Balancer HTTPS Rule
resource "azurerm_lb_rule" "https_rule" {
  for_each                       = azurerm_lb.internal_lb
  name                           = "internal-${local.per_instance[each.key].lb_role}-${local.per_instance[each.key].lb_sequence}-https-lbrule"
  loadbalancer_id                = azurerm_lb.internal_lb[each.key].id
  protocol                       = "Tcp"
  frontend_port                  = 443
  backend_port                   = 443
  frontend_ip_configuration_name = azurerm_lb.internal_lb[each.key].frontend_ip_configuration[0].name
  backend_address_pool_ids       = [azurerm_lb_backend_address_pool.internal_lb_bepool[each.key].id]
  idle_timeout_in_minutes        = 4
  enable_floating_ip             = false
  enable_tcp_reset               = false
  disable_outbound_snat          = false
  probe_id                       = azurerm_lb_probe.tcp_probe[each.key].id
}
